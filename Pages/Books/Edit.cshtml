public class EditModel : PageModel
{
    private readonly BledeaIuliana_Lab2.Data.BledeaIuliana_Lab2Context _context;

    public EditModel(BledeaIuliana_Lab2.Data.BledeaIuliana_Lab2Context context)
    {
        _context = context;
    }

    [BindProperty]
    public Book Book { get; set; } = default!;

    public SelectList PublisherList { get; set; } = default!;

    public async Task<IActionResult>
    OnGetAsync(int? id)
    {
    if (id == null)
    {
    return NotFound();
    }

    // Load the book with its related Publisher
    Book = await _context.Book
    .Include(b => b.Publisher)
    .FirstOrDefaultAsync(m => m.Id == id);

    if (Book == null)
    {
    return NotFound();
    }

    // Populate PublisherList for the dropdown
    PublisherList = new SelectList(await _context.Publisher.ToListAsync(), "Id", "PublisherName");

    return Page();
    }

    public async Task<IActionResult>
        OnPostAsync()
        {
        if (!ModelState.IsValid)
        {
        // Repopulate the dropdown if validation fails
        PublisherList = new SelectList(await _context.Publisher.ToListAsync(), "Id", "PublisherName");
        return Page();
        }

        // Validate that the selected Publisher exists
        if (!_context.Publisher.Any(p => p.Id == Book.PublisherID))
        {
        ModelState.AddModelError("Book.PublisherID", "Invalid publisher selected.");
        PublisherList = new SelectList(await _context.Publisher.ToListAsync(), "Id", "PublisherName");
        return Page();
        }

        _context.Attach(Book).State = EntityState.Modified;

        try
        {
        await _context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
        if (!BookExists(Book.Id))
        {
        return NotFound();
        }
        else
        {
        throw;
        }
        }

        return RedirectToPage("./Index");
        }

        private bool BookExists(int id)
        {
        return _context.Book.Any(e => e.Id == id);
        }
        }
